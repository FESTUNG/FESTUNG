/*!
 * \dir ./darcy_2dv/
 *
 * \brief This is an implementation of the time-dependent Darcy equation using a
 *        local DG discretization and implicit Euler time integration. It can
 *        be coupled to free surface flows using problem darcy_swe_2dv.
 *
 * 
 * Let @f$J = (0,t_\mathrm{end})@f$ be a finite time interval and @f$\Omega 
 * \subset \mathbb{R}^2@f$ a polygonally bounded domain with boundary 
 * @f$\partial\Omega@f$, subdivided into Dirichlet boundary parts 
 * @f$\partial\Omega_\mathrm{D}@f$ and Neumann boundary parts
 * @f$\partial\Omega_\mathrm{N}@f$.
 *
 * In this problem we consider the time-dependent Darcy equation
 * @f[
 * S_0 \partial_t h - \nabla \cdot (\mathsf{K} \nabla h) = \tilde{f}
 * @f]
 * describing water transport through fully saturated porous media, where @f$h@f$ 
 * is generally understood as the hydraulic head. 
 * The coefficient @f$S_0@f$ denotes the specific storativity of the porous medium
 * and @f$K@f$ the permeability. 
 * Division by @f$S_0@f$ and setting
 * @f[
 * \mathsf{D} := \mathsf{K} / S_0\,, \qquad
 * f := \tilde{f} / S_0
 * @f]
 * yields below formulation of the problem:
 *
 * We seek approximate solutions 
 * @f$c:\overline{J}\times\overline{\Omega}\rightarrow\mathbb{R}@f$ 
 * of the time-dependent diffusion equation
 * @f{align*}{
 * \mathbf{q}                                  &\;=\; - \nabla h   &&\text{in}~J\times\Omega\,,\\
 * \partial_t h  + \nabla\cdot (d\,\mathbf{q}) &\;=\; f            &&\text{in}~J\times\Omega\,,\\
 * c                                           &\;=\; h_\mathrm{D} &&\text{on}~J\times{\partial\Omega}_{\mathrm{D}}\,,\\
 * \vec{q}\cdot\vec{\nu}                       &\;=\; g_\mathrm{N} &&\text{on}~J\times{\partial\Omega}_\mathrm{N}\,,\\
 * c                                           &\;=\; h_0          &&\text{on}~\{0\}\times\Omega\,.
 * @f}
 * The vector-valued quantity @f$\mathbf{q}@f$ was introduced as auxiliary unknown.  
 * The coefficients @f$D:J\times\Omega\rightarrow\mathbb{R}^{2\times2}@f$ and 
 * @f$f:J\times\Omega\rightarrow \mathbb{R}@f$ may vary in time and space. 
 * 
 * The implementation uses tensor product polynomial bases up to fourth order on
 * trapezoidal elemnts and implicit Euler method for time integration.
 * 
 * See @link ./darcy_2dv/configureProblem.m @endlink for available configuration options.
 * 
 * A detailed description can be found in @ref RRAFK2018.
 */


